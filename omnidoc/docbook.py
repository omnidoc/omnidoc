import lark
from .tree import Tree
from docutils import utils, nodes
from lxml import etree


def xmlTree_to_LarkTree(root):
    """
    Convert xml tree to lark tree

    Args:
        Tree usually generated by etree.parse(), etree.fromstring() 
    
    Returns:
        lark.Tree
    """
    return Tree(
        data=etree.QName(root).localname,
        children=[xmlTree_to_LarkTree(child) for child in list(root)],
        source_obj=root,
        text = root.text
    )

class docbookTranformer(lark.Transformer):
    """ """
    def transform(self, tree):
        y = super(docbookTranformer, self).transform(tree)
        return Tree(y.data, [
            docbookTranformer().transform(child) for child in tree.children
        ],
                    text=tree.text,
                    source_obj=tree.source_obj)

    def book(self, b):
        return Tree('document', b)

    def info(self, i):
        return Tree('docinfo', i)

    def orgname(self, o):
        return Tree('organization', o)

    def chapter(self, c):
        return Tree('section', c)

    def para(self, p):
        return Tree('paragraph', p)

    def itemizedlist(self, i):
        return Tree('bullet_list', i)

    def listitem(self, l):
        return Tree('list_item', l)

def tree_to_sphinx_node(tree):
    """Convert tree representation to sphinx node API.

    Args:
        tree (lark.Tree): Tree represntation to sphinx node API.
    """
    if tree.data == 'document':
        node = utils.new_document(source_path='/')
    else:
        node_type = getattr(nodes, tree.data)
        node = node_type(tree.text)
    for x in tree.children:
        node.append(tree_to_sphinx_node(x))
    return node